# -*- coding: utf-8 -*-
"""book_analysis_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C7apYnZlgWUn3tPAsctD_v7uDD5JlQ6F
"""

!pip install streamlit
import streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Set page title and configuration
st.set_page_config(page_title="Book Data Analysis", layout="wide")

# Add a title to your app
st.title("Book Data Analysis Dashboard")

# Load the data
@st.cache_data  # This caches the data to improve performance
def load_data():
    return pd.read_csv("/content/books_data.csv")

df = load_data()

# Display the raw data
st.subheader("Book Dataset")
st.dataframe(df)

# Clean price data by removing pound symbol and converting to numeric
df['Price'] = df['Price'].str.replace('Â£', '').astype(float)

# Display the raw data with enhanced options
st.subheader("Book Dataset")
st.dataframe(df.style.highlight_max(axis=0, subset=['Price']))

# Create sidebar filters
st.sidebar.header("Filter Options")

# Filter by availability
availability_options = df['Availability'].unique().tolist()
selected_availability = st.sidebar.multiselect(
    "Select Availability Status",
    options=availability_options,
    default=availability_options[:2]
)

# Filter by price range
min_price = float(df['Price'].min())
max_price = float(df['Price'].max())
price_range = st.sidebar.slider(
    "Price Range (£)",
    min_value=min_price,
    max_value=max_price,
    value=(min_price, max_price)
)

# Apply filters
filtered_df = df[
    (df['Availability'].isin(selected_availability)) &
    (df['Price'] >= price_range[0]) &
    (df['Price'] <= price_range[1])
]

st.write(f"Showing {len(filtered_df)} of {len(df)} books")
st.dataframe(filtered_df)

# Create layout with columns
col1, col2 = st.columns(2)

with col1:
    # Price distribution chart
    st.subheader("Price Distribution")
    fig_price = px.histogram(filtered_df, x="Price", nbins=20, title="Book Price Distribution")
    st.plotly_chart(fig_price, use_container_width=True)

with col2:
    # Books by availability status
    st.subheader("Books by Availability")
    availability_counts = filtered_df['Availability'].value_counts().reset_index()
    availability_counts.columns = ['Availability Status', 'Count']
    fig_availability = px.pie(availability_counts, values='Count', names='Availability Status')
    st.plotly_chart(fig_availability, use_container_width=True)

# Additional insights
st.subheader("Price Statistics")
stats_col1, stats_col2, stats_col3, stats_col4 = st.columns(4)
stats_col1.metric("Average Price", f"£{filtered_df['Price'].mean():.2f}")
stats_col2.metric("Median Price", f"£{filtered_df['Price'].median():.2f}")
stats_col3.metric("Minimum Price", f"£{filtered_df['Price'].min():.2f}")
stats_col4.metric("Maximum Price", f"£{filtered_df['Price'].max():.2f}")

# Use tabs for different analyses
tab1, tab2 = st.tabs(["Price Analysis", "Availability Analysis"])

with tab1:
    st.header("Price Analysis")

    # Add an expander for detailed price statistics
    with st.expander("Detailed Price Statistics"):
        st.write(filtered_df['Price'].describe())

    # Chart showing the top 10 most expensive books
    st.subheader("Top 10 Most Expensive Books")
    top_books = filtered_df.sort_values(by='Price', ascending=False).head(10)
    fig_top_books = px.bar(top_books, x='Title', y='Price',
                          labels={'Title': 'Book Title', 'Price': 'Price (£)'},
                          title="Most Expensive Books")
    fig_top_books.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig_top_books, use_container_width=True)

with tab2:
    st.header("Availability Analysis")

    # Chart showing availability counts
    availability_data = filtered_df['Availability'].str.extract(r'In stock \((\d+) available\)')[0]
    availability_data = pd.to_numeric(availability_data)
    filtered_df['Stock Count'] = availability_data

    st.subheader("Books by Stock Level")
    fig_stock = px.histogram(filtered_df, x="Stock Count", nbins=15)
    st.plotly_chart(fig_stock, use_container_width=True)